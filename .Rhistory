body = list(
div = structure(
list("\n",
div = structure(list("Header"),
.class = "card-header"
), "\n",
div = structure(list("\n",
h5 = structure(
list("Primary card title"),
.class = "card-title"
), "\n",
p = structure(
list(
"Some quick example text to build on the card title and make up the bulk of the cards content."
),
.class = "card-text"
), "\n"
), .class = "card-body"), "\n"
),
.class = "card text-white bg-primary mb-3", style = "max-width: 18rem;"
)
)
)
)
'list(
html = list(
body = list(
div = structure(
list("\n",
div = structure(list("Header"),
.class = "card-header"
), "\n",
div = structure(list("\n",
h5 = structure(
list("Primary card title"),
.class = "card-title"
), "\n",
p = structure(
list(
"Some quick example text to build on the card title and make up the bulk of the cards content."
),
.class = "card-text"
), "\n"
), .class = "card-body"), "\n"
),
.class = "card text-white bg-primary mb-3", style = "max-width: 18rem;"
)
)
)
)' %>%
str_replace_all("\n","")
read_lines(tmp_file)
read_lines(tmp_file) %>%
paste(collapse="")
read_lines(tmp_file) %>%
paste(collapse="") %>%
str_replace_all('\"\\n\"',"")
read_lines(tmp_file) %>%
paste(collapse="") %>%
str_replace_all("\"\\n\"","")
str_replace_all("\"\\n"","")
read_lines(tmp_file) %>%
paste(collapse="") %>%
str_replace_all("\"\n\"","")
read_lines(tmp_file) %>%
paste(collapse="") %>%
str_replace_all("\n","")
read_lines(tmp_file) %>%
paste(collapse="") %>%
str_replace_all("\\n","")
read_lines(tmp_file) %>%
paste(collapse="") %>%
str_replace_all("/\\n","")
library(zgtools)
new_project("homeanalytics","Zac Garland",email = "zachary.garland@outlook.com")
devtools::load_all(".")
readClipboard()
raw_html <- readClipboard()
readClipboard
readClipboard
raw_html_to_r(raw_html)
devtools::load_all(".")
raw_html_to_r(raw_html)
devtools::load_all(".")
raw_html_to_r(raw_html)
attempt_formal(here::here("R","raw_html_to_r.R"))
devtools::load_all(".")
attempt_formal(here::here("R","raw_html_to_r.R"))
devtools::load_all(".")
attempt_formal(here::here("R","raw_html_to_r.R"))
devtools::load_all(".")
raw_html_to_r(raw_html)
f_path = here::here("R","raw_html_to_r.R")
replace_dat <- NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
dplyr::tibble() %>%
stats::setNames(c("rowname", "funs")) %>%
tidyr::unnest(cols = c(funs)) %>%
tidyr::separate(rowname, c("other", "default"), sep = '"', extra = "drop") %>%
tidyr::gather(other, package, -funs) %>%
dplyr::select(package, funs) %>%
dplyr::filter(
stringr::str_detect(package, "package:"),
!stringr::str_detect(package, "package:base"),
!stringr::str_detect(package, stringr::str_replace(list.files(pattern=".Rproj$"),
paste0(".",tools::file_ext(list.files(pattern=".Rproj$"))),""))
) %>%
dplyr::mutate(
funs = paste0(" ", funs,"\\("),
new_fun = paste0(" ", package, "::", stringr::str_trim(funs)) %>%
stringr::str_replace_all("package:", "")
) %>%
dplyr::select(-package)
replace_dat
NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
dplyr::tibble() %>%
stats::setNames(c("rowname", "funs")) %>%
tidyr::unnest(cols = c(funs)) %>%
tidyr::separate(rowname, c("other", "default"), sep = '"', extra = "drop") %>%
tidyr::gather(other, package, -funs) %>%
dplyr::select(package, funs)
NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
dplyr::tibble() %>%
stats::setNames(c("rowname", "funs")) %>%
tidyr::unnest(cols = c(funs)) %>%
tidyr::separate(rowname, c("other", "default"), sep = '"', extra = "drop") %>%
tidyr::gather(other, package, -funs) %>%
dplyr::select(package, funs) %>% print(n = nrow(.))
NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
dplyr::tibble() %>%
stats::setNames(c("rowname", "funs")) %>%
tidyr::unnest(cols = c(funs)) %>% print(n = nrow(.))
zg_core_libs()
NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
dplyr::tibble() %>%
stats::setNames(c("rowname", "funs")) %>%
tidyr::unnest(cols = c(funs)) %>% print(n = nrow(.))
attempt_formal(f_path)
detach_packages()
devtools::load_all(".")
raw_html_to_r(raw_html)
NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
dplyr::tibble() %>%
stats::setNames(c("rowname", "funs")) %>%
tidyr::unnest(cols = c(funs)) %>%
tidyr::separate(rowname, c("other", "default"), sep = '"', extra = "drop") %>%
tidyr::gather(other, package, -funs) %>%
dplyr::select(package, funs) %>%
dplyr::filter(
stringr::str_detect(package, "package:"),
!stringr::str_detect(package, "package:base"),
!stringr::str_detect(package, stringr::str_replace(list.files(pattern=".Rproj$"),
paste0(".",tools::file_ext(list.files(pattern=".Rproj$"))),""))
) %>%
dplyr::mutate(
funs = paste0(" ", funs,"\\("),
new_fun = paste0(" ", package, "::", stringr::str_trim(funs)) %>%
stringr::str_replace_all("package:", "")
) %>%
dplyr::select(-package)
detach_packages()
detach_packages
devtools::load_all(".")
detach_packages
NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
dplyr::tibble()
NCmisc::list.functions.in.file(f_path)
devtools::load_all(".")
zg_core_libs()
NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
dplyr::tibble() %>%
stats::setNames(c("rowname", "funs"))
zg_core_libs(F)
NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
dplyr::tibble() %>%
stats::setNames(c("rowname", "funs")) %>%
tidyr::unnest(cols = c(funs)) %>%
tidyr::separate(rowname, c("other", "default"), sep = '"', extra = "drop") %>%
tidyr::gather(other, package, -funs) %>%
dplyr::select(package, funs) %>%
dplyr::filter(
stringr::str_detect(package, "package:"),
!stringr::str_detect(package, "package:stats|package:graphics|package:grDevices|package:utils|package:datasets|package:methods|package:base"),
!stringr::str_detect(package, stringr::str_replace(list.files(pattern=".Rproj$"),
paste0(".",tools::file_ext(list.files(pattern=".Rproj$"))),""))
) %>%
dplyr::mutate(
funs = paste0(" ", funs,"\\("),
new_fun = paste0(" ", package, "::", stringr::str_trim(funs)) %>%
stringr::str_replace_all("package:", "")
) %>%
dplyr::select(-package)
attempt_formal(f_path)
NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
dplyr::tibble() %>%
stats::setNames(c("rowname", "funs")) %>%
tidyr::unnest(cols = c(funs)) %>%
tidyr::separate(rowname, c("other", "default"), sep = '"', extra = "drop") %>%
tidyr::gather(other, package, -funs) %>%
dplyr::select(package, funs) %>%
dplyr::filter(
stringr::str_detect(package, "package:"),
!stringr::str_detect(package, "package:stats|package:graphics|package:grDevices|package:utils|package:datasets|package:methods|package:base"),
!stringr::str_detect(package, stringr::str_replace(list.files(pattern=".Rproj$"),
paste0(".",tools::file_ext(list.files(pattern=".Rproj$"))),""))
) %>%
dplyr::mutate(
funs = paste0(" ", funs,"\\("),
new_fun = paste0(" ", package, "::", stringr::str_trim(funs)) %>%
stringr::str_replace_all("package:", "")
) %>%
dplyr::select(-package)
replace_dat <- NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
tibble::rownames_to_column() %>%
dplyr::tibble() %>%
stats::setNames(c("rowname", "funs")) %>%
tidyr::unnest(cols = c(funs)) %>%
tidyr::separate(rowname, c("other", "default"), sep = '"', extra = "drop") %>%
tidyr::gather(other, package, -funs) %>%
dplyr::select(package, funs) %>%
dplyr::filter(
stringr::str_detect(package, "package:"),
!stringr::str_detect(package, "package:stats|package:graphics|package:grDevices|package:utils|package:datasets|package:methods|package:base"),
!stringr::str_detect(package, stringr::str_replace(list.files(pattern=".Rproj$"),
paste0(".",tools::file_ext(list.files(pattern=".Rproj$"))),""))
) %>%
dplyr::mutate(
funs = paste0(" ", funs,"\\("),
new_fun = paste0(" ", package, "::", stringr::str_trim(funs)) %>%
stringr::str_replace_all("package:", "")
) %>%
dplyr::select(-package)
replace_dat
replace_dat %>%
mutate_all(str_trim)
replace_dat %>%
mutate_all(str_trim) %>%
mutate_all(funs(paste0("\\(",.)))
replace_dat %>%
mutate_all(str_trim) %>%
mutate_all(funs(paste0("\\(",.))) %>%
bind_rows(replace_dat)
devtools::load_all(".")
attempt_formal(f_path)
devtools::load_all(".")
detach_packages()
devtools::load_all(".")
raw_html_to_r(raw_html)
devtools::load_all(".")
raw_html_to_r(raw_html)
pacman::p_load(recharts); pacman::p_load(echarts4r); pacman::p_load(echarts4r.maps)
pacman::p_load(shiny); pacman::p_load(shinyWidgets); pacman::p_load(shinydashboard)
pacman::p_load(purrr)
detach_packages()
install.packages('BiocManager')
pacman::p_load(recharts); pacman::p_load(echarts4r); pacman::p_load(echarts4r.maps)
pacman::p_load(shiny); pacman::p_load(shinyWidgets); pacman::p_load(shinydashboard)
pacman::p_load(purrr)
if (!require(devtools)) library(devtools)
install_github("madlogos/recharts")
devtools::install_github("madlogos/recharts")
install.packages(
'recharts',
repos = c('http://yihui.name/xran', 'http://cran.rstudio.com')
)
remotes::install_github("cosname/recharts")
pacman::p_load(recharts); pacman::p_load(echarts4r); pacman::p_load(echarts4r.maps)
pacman::p_load(shiny); pacman::p_load(shinyWidgets); pacman::p_load(shinydashboard)
pacman::p_load(purrr)
install.packages("echarts4r")
devtools::load_all(".")
detach_packages()
remotes::install_github('JohnCoene/echarts4r.maps')
pacman::p_load(recharts); pacman::p_load(echarts4r); pacman::p_load(echarts4r.maps)
pacman::p_load(shiny); pacman::p_load(shinyWidgets); pacman::p_load(shinydashboard)
pacman::p_load(purrr)
if(interactive()){
pacman::p_load(recharts); pacman::p_load(echarts4r); pacman::p_load(echarts4r.maps)
pacman::p_load(shiny); pacman::p_load(shinyWidgets); pacman::p_load(shinydashboard)
pacman::p_load(purrr)
data_by_region <- data.frame(
Name = rep("A", 8),
Region = rep("Northland", 8),
long = rep(174.3223, 8),
lat = rep(-35.7047, 8),
Year = 2013:2020,
Amount = c(227, 252, 373, 363, 287, 307, 308, 293)
)
# Remove Chatham Island for echarts4r maps
nz_file <- system.file("New_Zealand.json", package = "echarts4r.maps")
nz_json <- jsonlite::read_json(nz_file)
# get names of polygons
names <- nz_json$features %>%
map("properties") %>%
map("name") %>%
unlist()
island_index <- grep("Chatham", names)
nz_json$features[[island_index]] <- NULL
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
selectInput(inputId = "year",
label = "pick a year",
choices = unique(factor(data_by_region$Year))),
radioGroupButtons(
inputId = "switchMap", label = NULL, justified = TRUE,
choiceNames = c("Map", "Advanced"),
choiceValues = c("Map1", "Map2"),
status = "primary"
),
fluidRow(column(6, uiOutput(outputId = "map")))
)
)
server = function(input, output, session) {
output$map <- renderUI({
if(input$switchMap == "Map1"){
echarts4rOutput(outputId = "myMap1")
}else{
eChartOutput(outputId = "myMap2")
}
})
output$myMap1 <- renderEcharts4r({
data_by_year <- data_by_region[data_by_region$Year == req(input$year),]
data_by_year <- data.frame(data_by_year)
data_by_year$Region <- factor(data_by_year$Region)
data_by_year %>%
e_charts(Region) %>%
e_map_register("NZ", nz_json) %>%
e_map(Amount, map = "NZ") %>%
e_visual_map(
Amount,
top = "20%",
left = "0%",
inRange = list(color = c("#3366FF","#6699FF", "#66CCFF", "#33CCFF")),
type = "piecewise",
splitList = list(
list(min = 300),
list(min = 250, max = 300),
list(min = 100, max = 250),
list(value = 0, label = "None")
))
})
output$myMap2 <- renderEChart({
yeardata <- data_by_region[data_by_region$Year == input$year, ]
top5dat <- as.data.frame(yeardata) %>% top_n(5)
top5dat <- data.frame(top5dat)
names(top5dat) <- c('Family', 'name', 'lng', 'lat', 'Year', 'value')
echartr(NULL, type='map_world', subtype = 'New Zealand') %>%
addMP(series = 'Top 5',
data = top5dat,
symbol = 'pin',
symbolSize = JS('function (v) {return 10 + v/50;}'),
effect = list(show = TRUE),
itemStyle = list(normal = itemStyle(color = "#EE82EE"))
) %>%
addGeoCoord(top5dat[, c('name', 'lng', 'lat')]) %>%
setToolbox(show = FALSE) %>%
setSeries(hoverable = FALSE, itemStyle=list(
normal = itemStyle(
labelStyle = labelStyle(color="#EE82EE"),
borderColor = 'rgba(100,149,237,1)', borderWidth = 0.5,
areaStyle = areaStyle(color='#1b1b1b')))) %>%
setLegend(show = FALSE) %>%
setTitle('Advanced map', 'Fictious Data', pos = 11)
})
}
shinyApp(ui, server)
}
if(interactive()){
pacman::p_load(recharts); pacman::p_load(echarts4r); pacman::p_load(echarts4r.maps)
pacman::p_load(shiny); pacman::p_load(shinyWidgets); pacman::p_load(shinydashboard)
pacman::p_load(purrr);pacman::p_load(tidyverse)
data_by_region <- data.frame(
Name = rep("A", 8),
Region = rep("Northland", 8),
long = rep(174.3223, 8),
lat = rep(-35.7047, 8),
Year = 2013:2020,
Amount = c(227, 252, 373, 363, 287, 307, 308, 293)
)
# Remove Chatham Island for echarts4r maps
nz_file <- system.file("New_Zealand.json", package = "echarts4r.maps")
nz_json <- jsonlite::read_json(nz_file)
# get names of polygons
names <- nz_json$features %>%
map("properties") %>%
map("name") %>%
unlist()
island_index <- grep("Chatham", names)
nz_json$features[[island_index]] <- NULL
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody(
selectInput(inputId = "year",
label = "pick a year",
choices = unique(factor(data_by_region$Year))),
radioGroupButtons(
inputId = "switchMap", label = NULL, justified = TRUE,
choiceNames = c("Map", "Advanced"),
choiceValues = c("Map1", "Map2"),
status = "primary"
),
fluidRow(column(6, uiOutput(outputId = "map")))
)
)
server = function(input, output, session) {
output$map <- renderUI({
if(input$switchMap == "Map1"){
echarts4rOutput(outputId = "myMap1")
}else{
eChartOutput(outputId = "myMap2")
}
})
output$myMap1 <- renderEcharts4r({
data_by_year <- data_by_region[data_by_region$Year == req(input$year),]
data_by_year <- data.frame(data_by_year)
data_by_year$Region <- factor(data_by_year$Region)
data_by_year %>%
e_charts(Region) %>%
e_map_register("NZ", nz_json) %>%
e_map(Amount, map = "NZ") %>%
e_visual_map(
Amount,
top = "20%",
left = "0%",
inRange = list(color = c("#3366FF","#6699FF", "#66CCFF", "#33CCFF")),
type = "piecewise",
splitList = list(
list(min = 300),
list(min = 250, max = 300),
list(min = 100, max = 250),
list(value = 0, label = "None")
))
})
output$myMap2 <- renderEChart({
yeardata <- data_by_region[data_by_region$Year == input$year, ]
top5dat <- as.data.frame(yeardata) %>% top_n(5)
top5dat <- data.frame(top5dat)
names(top5dat) <- c('Family', 'name', 'lng', 'lat', 'Year', 'value')
echartr(NULL, type='map_world', subtype = 'New Zealand') %>%
addMP(series = 'Top 5',
data = top5dat,
symbol = 'pin',
symbolSize = JS('function (v) {return 10 + v/50;}'),
effect = list(show = TRUE),
itemStyle = list(normal = itemStyle(color = "#EE82EE"))
) %>%
addGeoCoord(top5dat[, c('name', 'lng', 'lat')]) %>%
setToolbox(show = FALSE) %>%
setSeries(hoverable = FALSE, itemStyle=list(
normal = itemStyle(
labelStyle = labelStyle(color="#EE82EE"),
borderColor = 'rgba(100,149,237,1)', borderWidth = 0.5,
areaStyle = areaStyle(color='#1b1b1b')))) %>%
setLegend(show = FALSE) %>%
setTitle('Advanced map', 'Fictious Data', pos = 11)
})
}
shinyApp(ui, server)
}
styler:::style_selection()
reprex::reprex(
ggplot(df) +
aes_string(x = names[4]) +
geom_bar(fill = "steelblue") +
geom_text(aes(y = after_stat(count)), vjust = 1.6, color = "white", size = 3.5) +
labs(y = "counts") +
scale_x_discrete(na.translate = TRUE) +
theme_bw()
)
devtools::load_all(".")
raw_html_to_r(readClipboard())
test <- raw_html_to_r(readClipboard())
test
devtools::load_all(".")
test <- raw_html_to_r(readClipboard())
devtools::load_all(".")
test <- raw_html_to_r(readClipboard())
devtools::load_all(".")
test <- raw_html_to_r(readClipboard())
test
test <- raw_html_to_r(readClipboard())
test
devtools::load_all(".")
test <- raw_html_to_r(readClipboard())
rm(test)
test <- raw_html_to_r(readClipboard())
test
test <- raw_html_to_r(readClipboard())
read_html("https://matrix.recolorado.com/Matrix/Public/Portal.aspx?L=1&k=1458539X248B&p=SS-0-0")
