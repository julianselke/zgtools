NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
tibble()
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble()
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
rename(fun = .)
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","packages"))
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","packages")) %>%
unnest()
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","packages")) %>%
unnest(cols = c(packages))
rebus::ALPHA
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","packages")) %>%
unnest(cols = c(packages)) %>%
separate(rowname,c("default","other"),sep = '"[:alpha:]"')
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","packages")) %>%
unnest(cols = c(packages)) %>%
separate(rowname,c("default","other"),sep = '"')
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","packages")) %>%
unnest(cols = c(packages)) %>%
separate(rowname,c("default","other"),sep = '"') %>%
gather(package,value,-packages)
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("default","other"),sep = '"') %>%
gather(package,value,-funs)
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("default","other"),sep = '"') %>%
gather(package,value,-funs) %>%
filter(str_detect(value,"package:"))
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("default","other"),sep = '"') %>%
gather(package,value,-funs) %>%
filter(str_detect(value,"package:"),
!str_detect(value,"package:base"))
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("default","other"),sep = '"') %>%
gather(package,value,-funs) %>%
filter(str_detect(value,"package:"),
!str_detect(value,"package:base"))
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("default","other"),sep = '"') %>%
gather(package,value,-funs)
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"')
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"') %>%
gather(package,value,-funs)
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"') %>%
gather(other,package,-funs)
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"') %>%
gather(other,package,-funs) %>%
select(package,funs) %>%
filter(str_detect(package,"package:"),
!str_detect(package,"package:base")) %>%
mutate(new_fun = paste0(package,"::",funs) %>%
str_replace_all("package:",""))
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"') %>%
gather(other,package,-funs) %>%
select(package,funs) %>%
filter(str_detect(package,"package:"),
!str_detect(package,"package:base")) %>%
mutate(new_fun = paste0(package,"::",funs) %>%
str_replace_all("package:","")) %>%
select(-package)
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"') %>%
gather(other,package,-funs) %>%
select(package,funs) %>%
filter(str_detect(package,"package:"),
!str_detect(package,"package:base")) %>%
mutate(new_fun = paste0(package,"::",funs) %>%
str_replace_all("package:","")) %>%
select(-package)
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"',extra = "discard") %>%
gather(other,package,-funs) %>%
select(package,funs) %>%
filter(str_detect(package,"package:"),
!str_detect(package,"package:base")) %>%
mutate(new_fun = paste0(package,"::",funs) %>%
str_replace_all("package:","")) %>%
select(-package)
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"',extra = "drop") %>%
gather(other,package,-funs) %>%
select(package,funs) %>%
filter(str_detect(package,"package:"),
!str_detect(package,"package:base")) %>%
mutate(new_fun = paste0(package,"::",funs) %>%
str_replace_all("package:","")) %>%
select(-package)
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"',extra = "drop",fill = NULL) %>%
gather(other,package,-funs) %>%
select(package,funs) %>%
filter(str_detect(package,"package:"),
!str_detect(package,"package:base")) %>%
mutate(new_fun = paste0(package,"::",funs) %>%
str_replace_all("package:","")) %>%
select(-package)
NCmisc::list.functions.in.file(here::here("R", "formal_args.R")) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"',extra = "drop") %>%
gather(other,package,-funs) %>%
select(package,funs) %>%
filter(str_detect(package,"package:"),
!str_detect(package,"package:base")) %>%
mutate(new_fun = paste0(package,"::",funs) %>%
str_replace_all("package:","")) %>%
select(-package)
attempt_formal <- function(file){
NCmisc::list.functions.in.file(file) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"',extra = "drop") %>%
gather(other,package,-funs) %>%
select(package,funs) %>%
filter(str_detect(package,"package:"),
!str_detect(package,"package:base")) %>%
mutate(new_fun = paste0(package,"::",funs) %>%
str_replace_all("package:","")) %>%
select(-package)
}
attempt_formal(
here::here("R","formal_args")
)
attempt_formal(
here::here("R","formal_args.R")
)
replace_dat <- attempt_formal(
here::here("R","formal_args.R")
)
attempt_formal <- function(f_path){
NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"',extra = "drop") %>%
gather(other,package,-funs) %>%
select(package,funs) %>%
filter(str_detect(package,"package:"),
!str_detect(package,"package:base")) %>%
mutate(new_fun = paste0(package,"::",funs) %>%
str_replace_all("package:","")) %>%
select(-package)
}
f_path <- here::here("R","formal_args.R")
replace_dat <- attempt_formal(
f_path
)
read_lines(f_path)
replace_dat <- attempt_formal(
f_path
)
replace_dat
replace_dat %>%
mutate(to_replace = paste(shQuote(new_fun),"=",shQuote(funs)))
replace_dat %>%
mutate(to_replace = paste(shQuote(new_fun),"=",shQuote(funs))) %>%
pull(to_replace)
replace_dat %>%
mutate(to_replace = paste(shQuote(new_fun),"=",shQuote(funs))) %>%
pull(to_replace) %>%
paste(collapse = ",")
replace_string <- replace_dat %>%
mutate(to_replace = paste(shQuote(new_fun),"=",shQuote(funs))) %>%
pull(to_replace) %>%
paste(collapse = ",")
read_lines(f_path)
read_lines(f_path) %>%
str_replace_all(replace_string)
replace_string <- replace_dat %>%
mutate(to_replace = paste(shQuote(new_fun),"=",shQuote(funs))) %>%
pull(to_replace)
read_lines(f_path) %>%
str_replace_all(replace_string)
replace_string
replace_string %>%
str_c()
replace_string %>%
str_c() %>%
dput()
replace_dat %>%
pull(funs) %>%
setNames(pull(replace_dat,new_fun))
replace_string <- replace_dat %>%
pull(funs) %>%
setNames(pull(replace_dat,new_fun))
read_lines(f_path) %>%
str_replace_all(replace_string)
c("one" = "1", "two" = "2", "three" = "3")
read_lines(f_path) %>%
str_replace_all(replace_string)
replace_string
read_lines(f_path) %>%
str_replace_all(replace_string)
read_lines(f_path) %>%
str_replace_all(replace_string) %>%
writeLines()
replace_string %>% dput()
replace_string <- replace_dat %>%
pull(funs) %>%
setNames(pull(replace_dat,shQuote(new_fun)))
replace_string <- replace_dat %>%
pull(funs) %>%
setNames(pull(replace_dat,shQuote(new_fun)))
replace_string <- replace_dat %>%
pull(funs) %>%
setNames(pull(replace_dat,new_fun) %>% shQuote)
read_lines(f_path) %>%
str_replace_all(replace_string) %>%
writeLines()
replace_string
replace_string %>%
dput()
c("one" = "1", "two" = "2", "three" = "3")
c("one" = "1", "two" = "2", "three" = "3") %>% dput()
fruits %>%
str_c(collapse = "---")
fruits <- c("one apple", "two pears", "three bananas")
fruits %>%
str_c(collapse = "---")
fruits %>%
str_c(collapse = "---") %>%
str_replace_all(c("one" = "1", "two" = "2", "three" = "3"))
replace_string <- replace_dat %>%
pull(funs) %>%
set_names(pull(replace_dat,new_fun))
replace_string %>% dput()
read_lines(f_path)
read_lines(f_path) %>%
str_replace_all(c("clipr::write_clip" = "write_clip"))
read_lines(f_path) %>%
str_replace_all(c("cliprwrite_clip" = "write_clip"))
read_lines(f_path) %>%
str_replace_all(c("write_clip" = "clipr::write_clip"))
read_lines(f_path) %>%
as.character()
read_lines(f_path) %>%
as.character() %>%
str_replace_all(c("write_clip" = "clipr::write_clip"))
read_lines(f_path) %>%
# as.character() %>%
str_replace_all(c("write_clip" = "clipr::write_clip"))
replace_string <- replace_dat %>%
pull(new_fun) %>%
set_names(pull(replace_dat,funs))
read_lines(f_path) %>%
str_replace_all(replace_string)
attempt_formal <- function(f_path){
replace_dat <- NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"',extra = "drop") %>%
gather(other,package,-funs) %>%
select(package,funs) %>%
filter(str_detect(package,"package:"),
!str_detect(package,"package:base")) %>%
mutate(new_fun = paste0(package,"::",funs) %>%
str_replace_all("package:","")) %>%
select(-package)
replace_string <- replace_dat %>%
pull(new_fun) %>%
set_names(pull(replace_dat,funs))
read_lines(f_path) %>%
str_replace_all(replace_string) %>%
write_lines(f_path)
}
f_path <- here::here("R","formal_args.R")
attempt_formal(
f_path
)
attempt_formal(
f_path
)
attempt_formal <- function(f_path){
replace_dat <- NCmisc::list.functions.in.file(f_path) %>%
as.data.frame() %>%
rownames_to_column() %>%
tibble() %>%
setNames(c("rowname","funs")) %>%
unnest(cols = c(funs)) %>%
separate(rowname,c("other","default"),sep = '"',extra = "drop") %>%
gather(other,package,-funs) %>%
select(package,funs) %>%
filter(str_detect(package,"package:"),
!str_detect(package,"package:base")) %>%
mutate(funs = paste0(" ",funs),
new_fun = paste0(" ",package,"::",str_trim(funs)) %>%
str_replace_all("package:","")) %>%
select(-package)
replace_string <- replace_dat %>%
pull(new_fun) %>%
set_names(pull(replace_dat,funs))
read_lines(f_path) %>%
str_replace_all(replace_string) %>%
write_lines(f_path)
}
attempt_formal(
f_path
)
attempt_formal(
f_path
)
use_roxygen_comments(attempt_formal)
list.files(here::here("R"))
list.files(here::here("R"),full.names = T)
list.files(here::here("R"),full.names = T) %>% map(~{attempt_formal})
rm(list = ls())
devtools::load_all(".")
list.files(here::here("R"),full.names = T) %>% map(~{attempt_formal(.x)})
devtools::load_all(".")
devtools::load_all(".")
formal_args(mean)
new_project
styler::style_pkg()
list.files(here::here("R"),full.names = T) %>% map(~{attempt_formal(.x)})
list.files(here::here("R"),full.names = T) %>% map(~{attempt_formal(.x)})
devtools::load_all(".")
list.files(here::here("R"),full.names = T) %>% map(~{attempt_formal(.x)})
devtools::load_all(".")
list.files(here::here("R"),full.names = T) %>% map(~{attempt_formal(.x)})
devtools::load_all(".")
list.files(here::here("R"))
list.files(here::here("R")) %>% lapply(zgtools::formal_args)
list.files(here::here("R")) %>% str_replace_all(".R","") %>% lapply(zgtools::formal_args)
devtools::load_all(".")
list.files(here::here("R")) %>% str_replace_all(".R","") %>% lapply(zgtools::formal_args)
attempt_formal(mean)
formal_args(mean)
attempt_formal(here::here("R","attempt_formal.R"))
formal_args(mean)
highlight_load(
pacman,tidyverse
)
new_project
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::load_all(".")
roxygen2::roxygenize()
devtools::load_all(".")
roxygen2::roxygenize()
pacman::p_load(git2r)
git2r::commit(message = "Cleaned up roxygen docs",all = T)
git2r::push()
git2r::push()
devtools::install_github("zac-garland/zgtools")
devtools::install_github("zac-garland/zgtools")
devtools::install_github("zac-garland/zgtools")
install.packages("rlang")
file.exists(readClipboard())
file.exists(‘C:\Users\zg5280\Documents\R\win-library\4.0/00LOCK’)
readClipboard()
file.exists(‘C:\\Users\\zg5280\\Documents\\R\\win-library\\4.0\\00LOCK’)
file.exists("C:\\Users\\zg5280\\Documents\\R\\win-library\\4.0\\00LOCK")
install.packages("rlang")
devtools::install_github("zac-garland/zgtools")
list.files(here::here("R"),full.names = T)
devtools::load_all(".")
devtools::load_all(".")
list.files(here::here("R"),full.names = T) %>% map(~{readr::read_lines(.x) %>% stringr::str_replace_all("zgtools::","") %>% readr::write_lines(.x)})
list.files(pattern=".Rproj")
devtools::load_all(".")
list.files(here::here("R"))
list.files(here::here("R"),full.names = T)
list.files(here::here("R"),full.names = T) %>% lapply(attempt_formal)
list.files(here::here("R"),full.names = T) %>% lapply(attempt_formal)
devtools::load_all(".")
list.files(here::here("R"),full.names = T) %>% lapply(attempt_formal)
devtools::load_all(".")
list.files(here::here("R"),full.names = T) %>% lapply(attempt_formal)
paste0(tools::file_ext(list.files(pattern=".Rproj$")),".")
devtools::load_all(".")
devtools::load_all(".")
list.files(here::here("R"),full.names = T) %>% lapply(attempt_formal)
devtools::load_all(".")
git2r::commit(message = "changed erroneous call to same package",all = T)
pacman::p_load("gert")
git_commit_all("testing gert")
git_push()
gert::git_commit_all("removed direct name collision")
gert::git_push()
devtools::install_github("zac-garland/zgtools")
devtools::load_all(".")
gert::git_commit_all()
gert::git_commit_all("changed highlight to include (")
gert::git_push()
devtools::install_github("zac-garland/ztools")
devtools::install_github("zac-garland/zgtools")
rstudioapi::restartSession()
devtools::install_github("zac-garland/zgtools")
gert::git_commit_all()
gert::git_commit_all("fixed na keywords included")
gert::git_push()
